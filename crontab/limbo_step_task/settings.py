"""
Django settings for limbo_step_task project.

Generated by 'django-admin startproject' using Django 2.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'uxpih@xxadcn3stoxyqybxur*7)9cuxv)9$ub693d=%2h%gd%)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'applications.apps.ApplicationsConfig',
    "django_crontab",     # 定时任务
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'limbo_step_task.urls'
from conf import env

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'limbo_step_task.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': env.MYSQL_DATABASE,
        'HOST': env.MYSQL_HOST,
        'PORT': env.MYSQL_PORT,
        'USER': env.MYSQL_USERNAME,
        'PASSWORD': env.MYSQL_PASSWORD,
        'CHARSET': 'utf8mp4'
    }
}

# ================================================= #
# redis 数据库配置
# ================================================= #
CACHES = {
    # django存缓默认位置,redis 0号库
    # default: 连接名称,
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:63790/0",
        'TIMEOUT': 15,  # default expire time per api call
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SOCKET_CONNECT_TIMEOUT": 5,  # in seconds
            "SOCKET_TIMEOUT": 60,  # r/w timeout in seconds
            'MAX_ENTRIES': 1000000,
            'KEY_PREFIX': 'recruit-',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
# 日志相关配置
# 如果日志文件夹不存在则创建该文件夹
LOG_PATH = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_PATH):
    os.makedirs(LOG_PATH)

# ================================================= #
# 定时任务配置
# ================================================= #

CRONJOBS = [
    # * 表示 分钟(0-59) 小时(0-23) 每个月的哪一天(1-31) 月份(1-12) 周几(0-6) # 36 14 * * *
    ('8 8 * * *', 'applications.crontab.mi_job.mi_job', '>> {}'.format(os.path.join(LOG_PATH, "crontab.log"))),
    ('10 10 * * *', 'applications.crontab.mi_job.mi_job', '>> {}'.format(os.path.join(LOG_PATH, "crontab.log"))),
    ('12 12 * * *', 'applications.crontab.mi_job.mi_job', '>> {}'.format(os.path.join(LOG_PATH, "crontab.log"))),
    ('14 14 * * *', 'applications.crontab.mi_job.mi_job', '>> {}'.format(os.path.join(LOG_PATH, "crontab.log"))),
    ('17 17 * * *', 'applications.crontab.mi_job.mi_job', '>> {}'.format(os.path.join(LOG_PATH, "crontab.log"))),
    ('19 19 * * *', 'applications.crontab.mi_job.mi_job', '>> {}'.format(os.path.join(LOG_PATH, "crontab.log"))),
    # ('*/1 * * * *', 'applications.crontab.mi_job.check', '>> {}'.format(os.path.join(LOG_PATH, "crontab.log"))),
]
# 解决 crontab 中文问题
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'
'''
#添加并启动定时任务
python manage.py crontab add
#显示当前的定时任务
python manage.py crontab show
crontab -l
#删除所有定时任务
python manage.py crontab remove
# 查看定时任务执行状态
tail -f /var/log/cron
service crond status

'''